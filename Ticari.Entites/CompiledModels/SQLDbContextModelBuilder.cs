// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ticari.Entities.CompiledModels
{
    public partial class SQLDbContextModel
    {
        partial void Initialize()
        {
            var categoryProduct = CategoryProductEntityType.Create(this);
            var category = CategoryEntityType.Create(this);
            var gsm116 = Gsm116EntityType.Create(this);
            var product = ProductEntityType.Create(this);

            CategoryProductEntityType.CreateForeignKey1(categoryProduct, category);
            CategoryProductEntityType.CreateForeignKey2(categoryProduct, product);

            CategoryEntityType.CreateSkipNavigation1(category, product, categoryProduct);
            ProductEntityType.CreateSkipNavigation1(product, category, categoryProduct);

            CategoryProductEntityType.CreateAnnotations(categoryProduct);
            CategoryEntityType.CreateAnnotations(category);
            Gsm116EntityType.CreateAnnotations(gsm116);
            ProductEntityType.CreateAnnotations(product);

            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var categoryProduct = FindEntityType("CategoryProduct")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            categoryProduct.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var categoryProductTableBase = new TableBase("CategoryProduct", null, relationalModel);
            var categoriesIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoriesId", "int", categoryProductTableBase);
            categoryProductTableBase.Columns.Add("CategoriesId", categoriesIdColumnBase);
            var productsIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductsId", "int", categoryProductTableBase);
            categoryProductTableBase.Columns.Add("ProductsId", productsIdColumnBase);
            relationalModel.DefaultTables.Add("CategoryProduct", categoryProductTableBase);
            var categoryProductMappingBase = new TableMappingBase<ColumnMappingBase>(categoryProduct, categoryProductTableBase, true);
            categoryProductTableBase.AddTypeMapping(categoryProductMappingBase, false);
            defaultTableMappings.Add(categoryProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoriesIdColumnBase, categoryProduct.FindProperty("CategoriesId")!, categoryProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productsIdColumnBase, categoryProduct.FindProperty("ProductsId")!, categoryProductMappingBase);

            var tableMappings = new List<TableMapping>();
            categoryProduct.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var categoryProductTable = new Table("CategoryProduct", null, relationalModel);
            var categoriesIdColumn = new Column("CategoriesId", "int", categoryProductTable);
            categoryProductTable.Columns.Add("CategoriesId", categoriesIdColumn);
            var productsIdColumn = new Column("ProductsId", "int", categoryProductTable);
            categoryProductTable.Columns.Add("ProductsId", productsIdColumn);
            var pK_CategoryProduct = new UniqueConstraint("PK_CategoryProduct", categoryProductTable, new[] { categoriesIdColumn, productsIdColumn });
            categoryProductTable.PrimaryKey = pK_CategoryProduct;
            var pK_CategoryProductUc = RelationalModel.GetKey(this,
                "CategoryProduct",
                new[] { "CategoriesId", "ProductsId" });
            pK_CategoryProduct.MappedKeys.Add(pK_CategoryProductUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoryProductUc).Add(pK_CategoryProduct);
            categoryProductTable.UniqueConstraints.Add("PK_CategoryProduct", pK_CategoryProduct);
            var iX_CategoryProduct_ProductsId = new TableIndex(
            "IX_CategoryProduct_ProductsId", categoryProductTable, new[] { productsIdColumn }, false);
            var iX_CategoryProduct_ProductsIdIx = RelationalModel.GetIndex(this,
                "CategoryProduct",
                new[] { "ProductsId" });
            iX_CategoryProduct_ProductsId.MappedIndexes.Add(iX_CategoryProduct_ProductsIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CategoryProduct_ProductsIdIx).Add(iX_CategoryProduct_ProductsId);
            categoryProductTable.Indexes.Add("IX_CategoryProduct_ProductsId", iX_CategoryProduct_ProductsId);
            relationalModel.Tables.Add(("CategoryProduct", null), categoryProductTable);
            var categoryProductTableMapping = new TableMapping(categoryProduct, categoryProductTable, true);
            categoryProductTable.AddTypeMapping(categoryProductTableMapping, false);
            tableMappings.Add(categoryProductTableMapping);
            RelationalModel.CreateColumnMapping(categoriesIdColumn, categoryProduct.FindProperty("CategoriesId")!, categoryProductTableMapping);
            RelationalModel.CreateColumnMapping(productsIdColumn, categoryProduct.FindProperty("ProductsId")!, categoryProductTableMapping);

            var category = FindEntityType("Ticari.Entities.Entities.Concrete.Category")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var ticariEntitiesEntitiesConcreteCategoryTableBase = new TableBase("Ticari.Entities.Entities.Concrete.Category", null, relationalModel);
            var categoryNameColumnBase = new ColumnBase<ColumnMappingBase>("CategoryName", "nvarchar(100)", ticariEntitiesEntitiesConcreteCategoryTableBase);
            ticariEntitiesEntitiesConcreteCategoryTableBase.Columns.Add("CategoryName", categoryNameColumnBase);
            var createDateColumnBase = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", ticariEntitiesEntitiesConcreteCategoryTableBase);
            ticariEntitiesEntitiesConcreteCategoryTableBase.Columns.Add("CreateDate", createDateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(500)", ticariEntitiesEntitiesConcreteCategoryTableBase)
            {
                IsNullable = true
            };
            ticariEntitiesEntitiesConcreteCategoryTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", ticariEntitiesEntitiesConcreteCategoryTableBase);
            ticariEntitiesEntitiesConcreteCategoryTableBase.Columns.Add("Id", idColumnBase);
            relationalModel.DefaultTables.Add("Ticari.Entities.Entities.Concrete.Category", ticariEntitiesEntitiesConcreteCategoryTableBase);
            var ticariEntitiesEntitiesConcreteCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, ticariEntitiesEntitiesConcreteCategoryTableBase, true);
            ticariEntitiesEntitiesConcreteCategoryTableBase.AddTypeMapping(ticariEntitiesEntitiesConcreteCategoryMappingBase, false);
            defaultTableMappings0.Add(ticariEntitiesEntitiesConcreteCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, category.FindProperty("Id")!, ticariEntitiesEntitiesConcreteCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryNameColumnBase, category.FindProperty("CategoryName")!, ticariEntitiesEntitiesConcreteCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase, category.FindProperty("CreateDate")!, ticariEntitiesEntitiesConcreteCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, category.FindProperty("Description")!, ticariEntitiesEntitiesConcreteCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var categoriesTable = new Table("Categories", null, relationalModel);
            var idColumn = new Column("Id", "int", categoriesTable);
            categoriesTable.Columns.Add("Id", idColumn);
            var categoryNameColumn = new Column("CategoryName", "nvarchar(100)", categoriesTable);
            categoriesTable.Columns.Add("CategoryName", categoryNameColumn);
            var createDateColumn = new Column("CreateDate", "datetime2", categoriesTable);
            categoriesTable.Columns.Add("CreateDate", createDateColumn);
            var descriptionColumn = new Column("Description", "nvarchar(500)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("Description", descriptionColumn);
            var pK_Categories = new UniqueConstraint("PK_Categories", categoriesTable, new[] { idColumn });
            categoriesTable.PrimaryKey = pK_Categories;
            var pK_CategoriesUc = RelationalModel.GetKey(this,
                "Ticari.Entities.Entities.Concrete.Category",
                new[] { "Id" });
            pK_Categories.MappedKeys.Add(pK_CategoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoriesUc).Add(pK_Categories);
            categoriesTable.UniqueConstraints.Add("PK_Categories", pK_Categories);
            var iX_Categories_CategoryName = new TableIndex(
            "IX_Categories_CategoryName", categoriesTable, new[] { categoryNameColumn }, true);
            var iX_Categories_CategoryNameIx = RelationalModel.GetIndex(this,
                "Ticari.Entities.Entities.Concrete.Category",
                new[] { "CategoryName" });
            iX_Categories_CategoryName.MappedIndexes.Add(iX_Categories_CategoryNameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Categories_CategoryNameIx).Add(iX_Categories_CategoryName);
            categoriesTable.Indexes.Add("IX_Categories_CategoryName", iX_Categories_CategoryName);
            var iX_Categories_Id = new TableIndex(
            "IX_Categories_Id", categoriesTable, new[] { idColumn }, false);
            var iX_Categories_IdIx = RelationalModel.GetIndex(this,
                "Ticari.Entities.Entities.Concrete.Category",
                new[] { "Id" });
            iX_Categories_Id.MappedIndexes.Add(iX_Categories_IdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Categories_IdIx).Add(iX_Categories_Id);
            categoriesTable.Indexes.Add("IX_Categories_Id", iX_Categories_Id);
            relationalModel.Tables.Add(("Categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings0.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(categoryNameColumn, category.FindProperty("CategoryName")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn, category.FindProperty("CreateDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, category.FindProperty("Description")!, categoriesTableMapping);

            var gsm116 = FindEntityType("Ticari.Entities.Entities.Concrete.Gsm116")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            gsm116.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var ticariEntitiesEntitiesConcreteGsm116TableBase = new TableBase("Ticari.Entities.Entities.Concrete.Gsm116", null, relationalModel);
            var createDateColumnBase0 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", ticariEntitiesEntitiesConcreteGsm116TableBase);
            ticariEntitiesEntitiesConcreteGsm116TableBase.Columns.Add("CreateDate", createDateColumnBase0);
            var gsmColumnBase = new ColumnBase<ColumnMappingBase>("Gsm", "nvarchar(20)", ticariEntitiesEntitiesConcreteGsm116TableBase);
            ticariEntitiesEntitiesConcreteGsm116TableBase.Columns.Add("Gsm", gsmColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", ticariEntitiesEntitiesConcreteGsm116TableBase);
            ticariEntitiesEntitiesConcreteGsm116TableBase.Columns.Add("Id", idColumnBase0);
            var tcNoColumnBase = new ColumnBase<ColumnMappingBase>("TcNo", "nvarchar(20)", ticariEntitiesEntitiesConcreteGsm116TableBase);
            ticariEntitiesEntitiesConcreteGsm116TableBase.Columns.Add("TcNo", tcNoColumnBase);
            relationalModel.DefaultTables.Add("Ticari.Entities.Entities.Concrete.Gsm116", ticariEntitiesEntitiesConcreteGsm116TableBase);
            var ticariEntitiesEntitiesConcreteGsm116MappingBase = new TableMappingBase<ColumnMappingBase>(gsm116, ticariEntitiesEntitiesConcreteGsm116TableBase, true);
            ticariEntitiesEntitiesConcreteGsm116TableBase.AddTypeMapping(ticariEntitiesEntitiesConcreteGsm116MappingBase, false);
            defaultTableMappings1.Add(ticariEntitiesEntitiesConcreteGsm116MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, gsm116.FindProperty("Id")!, ticariEntitiesEntitiesConcreteGsm116MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase0, gsm116.FindProperty("CreateDate")!, ticariEntitiesEntitiesConcreteGsm116MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gsmColumnBase, gsm116.FindProperty("Gsm")!, ticariEntitiesEntitiesConcreteGsm116MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tcNoColumnBase, gsm116.FindProperty("TcNo")!, ticariEntitiesEntitiesConcreteGsm116MappingBase);

            var tableMappings1 = new List<TableMapping>();
            gsm116.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var gsm116sTable = new Table("Gsm116s", null, relationalModel);
            var idColumn0 = new Column("Id", "int", gsm116sTable);
            gsm116sTable.Columns.Add("Id", idColumn0);
            var createDateColumn0 = new Column("CreateDate", "datetime2", gsm116sTable);
            gsm116sTable.Columns.Add("CreateDate", createDateColumn0);
            var gsmColumn = new Column("Gsm", "nvarchar(20)", gsm116sTable);
            gsm116sTable.Columns.Add("Gsm", gsmColumn);
            var tcNoColumn = new Column("TcNo", "nvarchar(20)", gsm116sTable);
            gsm116sTable.Columns.Add("TcNo", tcNoColumn);
            var pK_Gsm116s = new UniqueConstraint("PK_Gsm116s", gsm116sTable, new[] { idColumn0 });
            gsm116sTable.PrimaryKey = pK_Gsm116s;
            var pK_Gsm116sUc = RelationalModel.GetKey(this,
                "Ticari.Entities.Entities.Concrete.Gsm116",
                new[] { "Id" });
            pK_Gsm116s.MappedKeys.Add(pK_Gsm116sUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Gsm116sUc).Add(pK_Gsm116s);
            gsm116sTable.UniqueConstraints.Add("PK_Gsm116s", pK_Gsm116s);
            var iX_Gsm116s_Id = new TableIndex(
            "IX_Gsm116s_Id", gsm116sTable, new[] { idColumn0 }, false);
            var iX_Gsm116s_IdIx = RelationalModel.GetIndex(this,
                "Ticari.Entities.Entities.Concrete.Gsm116",
                new[] { "Id" });
            iX_Gsm116s_Id.MappedIndexes.Add(iX_Gsm116s_IdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Gsm116s_IdIx).Add(iX_Gsm116s_Id);
            gsm116sTable.Indexes.Add("IX_Gsm116s_Id", iX_Gsm116s_Id);
            relationalModel.Tables.Add(("Gsm116s", null), gsm116sTable);
            var gsm116sTableMapping = new TableMapping(gsm116, gsm116sTable, true);
            gsm116sTable.AddTypeMapping(gsm116sTableMapping, false);
            tableMappings1.Add(gsm116sTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, gsm116.FindProperty("Id")!, gsm116sTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn0, gsm116.FindProperty("CreateDate")!, gsm116sTableMapping);
            RelationalModel.CreateColumnMapping(gsmColumn, gsm116.FindProperty("Gsm")!, gsm116sTableMapping);
            RelationalModel.CreateColumnMapping(tcNoColumn, gsm116.FindProperty("TcNo")!, gsm116sTableMapping);

            var product = FindEntityType("Ticari.Entities.Entities.Concrete.Product")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var ticariEntitiesEntitiesConcreteProductTableBase = new TableBase("Ticari.Entities.Entities.Concrete.Product", null, relationalModel);
            var amountColumnBase = new ColumnBase<ColumnMappingBase>("Amount", "decimal(18,2)", ticariEntitiesEntitiesConcreteProductTableBase);
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("Amount", amountColumnBase);
            var createDateColumnBase1 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", ticariEntitiesEntitiesConcreteProductTableBase);
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("CreateDate", createDateColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", ticariEntitiesEntitiesConcreteProductTableBase);
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("Id", idColumnBase1);
            var productCodeColumnBase = new ColumnBase<ColumnMappingBase>("ProductCode", "nvarchar(100)", ticariEntitiesEntitiesConcreteProductTableBase);
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("ProductCode", productCodeColumnBase);
            var productDescriptionColumnBase = new ColumnBase<ColumnMappingBase>("ProductDescription", "nvarchar(500)", ticariEntitiesEntitiesConcreteProductTableBase)
            {
                IsNullable = true
            };
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("ProductDescription", productDescriptionColumnBase);
            var productNameColumnBase = new ColumnBase<ColumnMappingBase>("ProductName", "nvarchar(100)", ticariEntitiesEntitiesConcreteProductTableBase);
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("ProductName", productNameColumnBase);
            var unitPriceColumnBase = new ColumnBase<ColumnMappingBase>("UnitPrice", "decimal(18,2)", ticariEntitiesEntitiesConcreteProductTableBase);
            ticariEntitiesEntitiesConcreteProductTableBase.Columns.Add("UnitPrice", unitPriceColumnBase);
            relationalModel.DefaultTables.Add("Ticari.Entities.Entities.Concrete.Product", ticariEntitiesEntitiesConcreteProductTableBase);
            var ticariEntitiesEntitiesConcreteProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, ticariEntitiesEntitiesConcreteProductTableBase, true);
            ticariEntitiesEntitiesConcreteProductTableBase.AddTypeMapping(ticariEntitiesEntitiesConcreteProductMappingBase, false);
            defaultTableMappings2.Add(ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, product.FindProperty("Id")!, ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amountColumnBase, product.FindProperty("Amount")!, ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase1, product.FindProperty("CreateDate")!, ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productCodeColumnBase, product.FindProperty("ProductCode")!, ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productDescriptionColumnBase, product.FindProperty("ProductDescription")!, ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productNameColumnBase, product.FindProperty("ProductName")!, ticariEntitiesEntitiesConcreteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitPriceColumnBase, product.FindProperty("UnitPrice")!, ticariEntitiesEntitiesConcreteProductMappingBase);

            var tableMappings2 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var productsTable = new Table("Products", null, relationalModel);
            var idColumn1 = new Column("Id", "int", productsTable);
            productsTable.Columns.Add("Id", idColumn1);
            var amountColumn = new Column("Amount", "decimal(18,2)", productsTable);
            productsTable.Columns.Add("Amount", amountColumn);
            var createDateColumn1 = new Column("CreateDate", "datetime2", productsTable);
            productsTable.Columns.Add("CreateDate", createDateColumn1);
            var productCodeColumn = new Column("ProductCode", "nvarchar(100)", productsTable);
            productsTable.Columns.Add("ProductCode", productCodeColumn);
            var productDescriptionColumn = new Column("ProductDescription", "nvarchar(500)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("ProductDescription", productDescriptionColumn);
            var productNameColumn = new Column("ProductName", "nvarchar(100)", productsTable);
            productsTable.Columns.Add("ProductName", productNameColumn);
            var unitPriceColumn = new Column("UnitPrice", "decimal(18,2)", productsTable);
            productsTable.Columns.Add("UnitPrice", unitPriceColumn);
            var pK_Products = new UniqueConstraint("PK_Products", productsTable, new[] { idColumn1 });
            productsTable.PrimaryKey = pK_Products;
            var pK_ProductsUc = RelationalModel.GetKey(this,
                "Ticari.Entities.Entities.Concrete.Product",
                new[] { "Id" });
            pK_Products.MappedKeys.Add(pK_ProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductsUc).Add(pK_Products);
            productsTable.UniqueConstraints.Add("PK_Products", pK_Products);
            var iX_Products_Id = new TableIndex(
            "IX_Products_Id", productsTable, new[] { idColumn1 }, false);
            var iX_Products_IdIx = RelationalModel.GetIndex(this,
                "Ticari.Entities.Entities.Concrete.Product",
                new[] { "Id" });
            iX_Products_Id.MappedIndexes.Add(iX_Products_IdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_IdIx).Add(iX_Products_Id);
            productsTable.Indexes.Add("IX_Products_Id", iX_Products_Id);
            var iX_Products_ProductCode = new TableIndex(
            "IX_Products_ProductCode", productsTable, new[] { productCodeColumn }, true);
            var iX_Products_ProductCodeIx = RelationalModel.GetIndex(this,
                "Ticari.Entities.Entities.Concrete.Product",
                new[] { "ProductCode" });
            iX_Products_ProductCode.MappedIndexes.Add(iX_Products_ProductCodeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_ProductCodeIx).Add(iX_Products_ProductCode);
            productsTable.Indexes.Add("IX_Products_ProductCode", iX_Products_ProductCode);
            var iX_Products_ProductName = new TableIndex(
            "IX_Products_ProductName", productsTable, new[] { productNameColumn }, true);
            var iX_Products_ProductNameIx = RelationalModel.GetIndex(this,
                "Ticari.Entities.Entities.Concrete.Product",
                new[] { "ProductName" });
            iX_Products_ProductName.MappedIndexes.Add(iX_Products_ProductNameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_ProductNameIx).Add(iX_Products_ProductName);
            productsTable.Indexes.Add("IX_Products_ProductName", iX_Products_ProductName);
            relationalModel.Tables.Add(("Products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings2.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(amountColumn, product.FindProperty("Amount")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn1, product.FindProperty("CreateDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(productCodeColumn, product.FindProperty("ProductCode")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(productDescriptionColumn, product.FindProperty("ProductDescription")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(productNameColumn, product.FindProperty("ProductName")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(unitPriceColumn, product.FindProperty("UnitPrice")!, productsTableMapping);
            var fK_CategoryProduct_Categories_CategoriesId = new ForeignKeyConstraint(
                "FK_CategoryProduct_Categories_CategoriesId", categoryProductTable, categoriesTable,
                new[] { categoriesIdColumn },
                categoriesTable.FindUniqueConstraint("PK_Categories")!, ReferentialAction.Cascade);
            var fK_CategoryProduct_Categories_CategoriesIdFk = RelationalModel.GetForeignKey(this,
                "CategoryProduct",
                new[] { "CategoriesId" },
                "Ticari.Entities.Entities.Concrete.Category",
                new[] { "Id" });
            fK_CategoryProduct_Categories_CategoriesId.MappedForeignKeys.Add(fK_CategoryProduct_Categories_CategoriesIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CategoryProduct_Categories_CategoriesIdFk).Add(fK_CategoryProduct_Categories_CategoriesId);
            categoryProductTable.ForeignKeyConstraints.Add(fK_CategoryProduct_Categories_CategoriesId);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fK_CategoryProduct_Categories_CategoriesId);
            var fK_CategoryProduct_Products_ProductsId = new ForeignKeyConstraint(
                "FK_CategoryProduct_Products_ProductsId", categoryProductTable, productsTable,
                new[] { productsIdColumn },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_CategoryProduct_Products_ProductsIdFk = RelationalModel.GetForeignKey(this,
                "CategoryProduct",
                new[] { "ProductsId" },
                "Ticari.Entities.Entities.Concrete.Product",
                new[] { "Id" });
            fK_CategoryProduct_Products_ProductsId.MappedForeignKeys.Add(fK_CategoryProduct_Products_ProductsIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CategoryProduct_Products_ProductsIdFk).Add(fK_CategoryProduct_Products_ProductsId);
            categoryProductTable.ForeignKeyConstraints.Add(fK_CategoryProduct_Products_ProductsId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_CategoryProduct_Products_ProductsId);
            return relationalModel.MakeReadOnly();
        }
    }
}
